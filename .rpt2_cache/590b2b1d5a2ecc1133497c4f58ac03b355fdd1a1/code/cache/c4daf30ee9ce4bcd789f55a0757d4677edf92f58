{"code":"import { AreaStatsService } from '../logic/area/areaStatsService';\r\nimport { OrderTokenType } from '../model/orderToken/orderTokenType';\r\nvar StateSelectorService = /** @class */ (function () {\r\n    function StateSelectorService() {\r\n    }\r\n    StateSelectorService.getFirstFromIronThroneSuccession = function (state) {\r\n        return state.ironThroneSuccession[0];\r\n    };\r\n    StateSelectorService.getAreaByKey = function (state, areaKey) {\r\n        var area = state.areas.get(areaKey);\r\n        return area ? area : null;\r\n    };\r\n    StateSelectorService.getPlayerByHouse = function (state, house) {\r\n        return state.players.find(function (player) { return player.house === house; });\r\n    };\r\n    // move related\r\n    StateSelectorService.getAllAreasAllowedToMarchTo = function (state, sourceArea) {\r\n        if (sourceArea.units.length === 0) {\r\n            return [];\r\n        }\r\n        var sourceAreaStats = AreaStatsService.getInstance().areaStats.get(sourceArea.key);\r\n        return this.getValidAreas(state, sourceArea, sourceAreaStats.borders);\r\n    };\r\n    StateSelectorService.calculateAllowedMaxSizeBasedOnSupply = function (state, house) {\r\n        var areas = Array.from(state.areas.values());\r\n        var supplyScore = state.currentlyAllowedSupply.get(house);\r\n        var armiesForHouse = this.calculateArmiesBySizeForHouse(areas, house);\r\n        var maxSize = 0;\r\n        var allowedArmies = this.SUPPLY_VS_ARMY_SIZE[supplyScore];\r\n        var index = 0;\r\n        for (var _i = 0, allowedArmies_1 = allowedArmies; _i < allowedArmies_1.length; _i++) {\r\n            var largestPossibleSize = allowedArmies_1[_i];\r\n            var armySize = armiesForHouse[index];\r\n            if (armySize === undefined || armySize < largestPossibleSize) {\r\n                return largestPossibleSize;\r\n            }\r\n            index++;\r\n        }\r\n        return maxSize;\r\n    };\r\n    StateSelectorService.enoughSupplyForArmySize = function (state, source, target) {\r\n        var targetArmySize = target === undefined ? 0 : target.units.length;\r\n        var oneUnitCanMove = targetArmySize + 1 <= this.calculateAllowedMaxSizeBasedOnSupply(state, state.currentHouse);\r\n        return target === undefined\r\n            || target.controllingHouse !== source.controllingHouse\r\n            || (target.controllingHouse === source.controllingHouse && oneUnitCanMove);\r\n    };\r\n    // recruiting related\r\n    StateSelectorService.getAreasAllowedToRecruit = function (state, house) {\r\n        return state.areasAllowedToRecruit.filter(function (areaKey) {\r\n            var area = state.areas.get(areaKey);\r\n            if (area.controllingHouse !== house) {\r\n                return false;\r\n            }\r\n            var maxArmySize = StateSelectorService.calculateAllowedMaxSizeBasedOnSupply(state, house);\r\n            return area.units.length < maxArmySize;\r\n        }).map(function (areaKey) { return state.areas.get(areaKey); });\r\n    };\r\n    // Supply related\r\n    StateSelectorService.getValidAreas = function (state, sourceArea, areasToCheck) {\r\n        var _this = this;\r\n        var validAreas = [];\r\n        areasToCheck\r\n            .forEach(function (areaKey) {\r\n            if (_this.isAllowedToMove(state, sourceArea, areaKey)) {\r\n                validAreas.push(areaKey);\r\n            }\r\n            var sourceAreaStats = AreaStatsService.getInstance().areaStats.get(sourceArea.key);\r\n            var areaStats = AreaStatsService.getInstance().areaStats.get(areaKey);\r\n            var area = state.areas.get(areaKey);\r\n            if (sourceAreaStats.isLandArea\r\n                && !areaStats.isLandArea\r\n                && (area !== undefined && (area.units.length > 0 && area.controllingHouse === sourceArea.controllingHouse))) {\r\n                validAreas = validAreas.concat(_this.getValidAreas(state, sourceArea, areaStats.borders));\r\n            }\r\n        });\r\n        // TODO Filter duplicates\r\n        return validAreas;\r\n    };\r\n    StateSelectorService.calculateArmiesBySizeForHouse = function (areas, house) {\r\n        return areas.filter(function (area) {\r\n            // an army of one unit does not count as an army\r\n            return area.controllingHouse === house && area.units.length > 1;\r\n        }).map(function (area) {\r\n            return area.units.length;\r\n        }).sort(function (a, b) {\r\n            return b - a;\r\n        });\r\n    };\r\n    StateSelectorService.isAllowedToMove = function (state, source, targetKey) {\r\n        var sourceAreaStats = AreaStatsService.getInstance().areaStats.get(source.key);\r\n        var targetAreaStats = AreaStatsService.getInstance().areaStats.get(targetKey);\r\n        var landToLandMove = sourceAreaStats.isLandArea && targetAreaStats.isLandArea;\r\n        var seaToSeaMove = !sourceAreaStats.isLandArea && !targetAreaStats.isLandArea;\r\n        var enoughSupplyForArmySize = this.enoughSupplyForArmySize(state, source, state.areas.get(targetKey));\r\n        return (landToLandMove || seaToSeaMove) && enoughSupplyForArmySize;\r\n    };\r\n    // token placement related\r\n    StateSelectorService.isAllowedToPlaceOrderToken = function (state, house, areaKey) {\r\n        var area = StateSelectorService.getAreaByKey(state, areaKey);\r\n        return area !== null && area.units.length > 0\r\n            && area.controllingHouse === house\r\n            && area.orderToken === null;\r\n    };\r\n    StateSelectorService.getPlacableOrderTokenTypes = function (state, house) {\r\n        var alreadyPlacedOrderTokens = Array.from(state.areas.values()).filter(function (area) {\r\n            return area.orderToken && area.controllingHouse === house;\r\n        }).map(function (area) {\r\n            return area.orderToken.getType();\r\n        });\r\n        return state.currentlyAllowedTokenTypes.filter(function (type) {\r\n            return alreadyPlacedOrderTokens.indexOf(type) === -1;\r\n        });\r\n    };\r\n    StateSelectorService.isAllowedToRaid = function (sourceArea, targetArea) {\r\n        var sourceAreaStats = AreaStatsService.getInstance().areaStats.get(sourceArea.key);\r\n        var targetAreaStats = AreaStatsService.getInstance().areaStats.get(targetArea.key);\r\n        return this.isConnectedArea(sourceArea, targetArea) && targetArea.controllingHouse !== null\r\n            && sourceArea.controllingHouse !== targetArea.controllingHouse\r\n            && (sourceAreaStats.isLandArea && targetAreaStats.isLandArea || !sourceAreaStats.isLandArea);\r\n    };\r\n    StateSelectorService.isConnectedArea = function (source, target) {\r\n        return AreaStatsService.getInstance().areaStats.get(source.key).borders.filter(function (areaKey) {\r\n            return areaKey === target.key;\r\n        }).length === 1;\r\n    };\r\n    StateSelectorService.SUPPLY_VS_ARMY_SIZE = [[2, 2], [3, 2], [3, 2, 2], [3, 2, 2, 2], [3, 3, 2, 2], [4, 3, 2, 2], [4, 3, 2, 2, 2]];\r\n    StateSelectorService.RAID_ORDER_TOKENS = [OrderTokenType.raid_0, OrderTokenType.raid_1, OrderTokenType.raid_special];\r\n    StateSelectorService.MARCH_ORDER_TOKENS = [OrderTokenType.march_minusOne, OrderTokenType.march_zero, OrderTokenType.march_special];\r\n    StateSelectorService.DEFEND_ORDER_TOKENS = [OrderTokenType.defend_0, OrderTokenType.defend_1, OrderTokenType.defend_special];\r\n    StateSelectorService.SUPPORT_ORDER_TOKENS = [OrderTokenType.support_0, OrderTokenType.support_1, OrderTokenType.support_special];\r\n    StateSelectorService.CONSOLIDATE_POWER_ORDER_TOKENS = [OrderTokenType.consolidatePower_0, OrderTokenType.consolidatePower_1, OrderTokenType.consolidatePower_special];\r\n    return StateSelectorService;\r\n}());\r\nexport default StateSelectorService;\r\n//# sourceMappingURL=stateSelectorService.js.map","map":{"version":3,"file":"stateSelectorService.js","sourceRoot":"","sources":["stateSelectorService.ts"],"names":[],"mappings":"AAKA,OAAO,EAAC,gBAAgB,EAAC,MAAM,gCAAgC,CAAC;AAChE,OAAO,EAAC,cAAc,EAAC,MAAM,oCAAoC,CAAC;AAElE;IAAA;IAwJA,CAAC;IA7Ie,qDAAgC,GAA9C,UAA+C,KAAqB;QAClE,MAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;IACvC,CAAC;IAEa,iCAAY,GAA1B,UAA2B,KAAqB,EAAE,OAAgB;QAChE,IAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACtC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;IAC5B,CAAC;IAEa,qCAAgB,GAA9B,UAA+B,KAAqB,EAAC,KAAY;QAC/D,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,KAAK,KAAK,KAAK,EAAtB,CAAsB,CAAC,CAAC;IAC9D,CAAC;IAED,eAAe;IAED,gDAA2B,GAAzC,UAA0C,KAAqB,EAAE,UAAgB;QAC/E,EAAE,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,EAAE,CAAC;QACZ,CAAC;QACD,IAAM,eAAe,GAAG,gBAAgB,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QACrF,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,UAAU,EAAE,eAAe,CAAC,OAAO,CAAC,CAAC;IACxE,CAAC;IAEa,yDAAoC,GAAlD,UAAmD,KAAqB,EAAE,KAAY;QACpF,IAAM,KAAK,GAAW,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;QACvD,IAAM,WAAW,GAAG,KAAK,CAAC,sBAAsB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC5D,IAAM,cAAc,GAAkB,IAAI,CAAC,6BAA6B,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACvF,IAAM,OAAO,GAAG,CAAC,CAAC;QAClB,IAAM,aAAa,GAAG,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;QAC5D,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,GAAG,CAAC,CAA8B,UAAa,EAAb,+BAAa,EAAb,2BAAa,EAAb,IAAa;YAA1C,IAAM,mBAAmB,sBAAA;YAC5B,IAAM,QAAQ,GAAW,cAAc,CAAC,KAAK,CAAC,CAAC;YAC/C,EAAE,CAAC,CAAC,QAAQ,KAAK,SAAS,IAAI,QAAQ,GAAG,mBAAmB,CAAC,CAAC,CAAC;gBAC7D,MAAM,CAAC,mBAAmB,CAAC;YAC7B,CAAC;YACD,KAAK,EAAE,CAAC;SACT;QACD,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;IAEa,4CAAuB,GAArC,UAAsC,KAAqB,EAAE,MAAY,EAAE,MAAY;QACrF,IAAM,cAAc,GAAG,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC;QACtE,IAAM,cAAc,GAAG,cAAc,GAAG,CAAC,IAAI,IAAI,CAAC,oCAAoC,CAAC,KAAK,EAAE,KAAK,CAAC,YAAY,CAAC,CAAC;QAClH,MAAM,CAAC,MAAM,KAAK,SAAS;eACtB,MAAM,CAAC,gBAAgB,KAAK,MAAM,CAAC,gBAAgB;eACnD,CAAC,MAAM,CAAC,gBAAgB,KAAK,MAAM,CAAC,gBAAgB,IAAI,cAAc,CAAC,CAAC;IAC/E,CAAC;IAGD,qBAAqB;IAEP,6CAAwB,GAAtC,UAAuC,KAAqB,EAAE,KAAY;QACxE,MAAM,CAAC,KAAK,CAAC,qBAAqB,CAAC,MAAM,CAAC,UAAC,OAAgB;YACzD,IAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACtC,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,KAAK,KAAK,CAAC,CAAC,CAAC;gBACpC,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;YAED,IAAM,WAAW,GAAG,oBAAoB,CAAC,oCAAoC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC5F,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,WAAW,CAAC;QACzC,CAAC,CAAC,CAAC,GAAG,CAAC,UAAA,OAAO,IAAI,OAAA,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,EAAxB,CAAwB,CAAC,CAAC;IAC9C,CAAC;IAED,iBAAiB;IAEF,kCAAa,GAA5B,UAA6B,KAAqB,EAAE,UAAgB,EAAE,YAAuB;QAA7F,iBAkBC;QAjBC,IAAI,UAAU,GAAc,EAAE,CAAC;QAC/B,YAAY;aACT,OAAO,CAAC,UAAC,OAAO;YACf,EAAE,CAAC,CAAC,KAAI,CAAC,eAAe,CAAC,KAAK,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;gBACrD,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC3B,CAAC;YACD,IAAM,eAAe,GAAG,gBAAgB,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YACrF,IAAM,SAAS,GAAG,gBAAgB,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACxE,IAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACtC,EAAE,CAAC,CAAC,eAAe,CAAC,UAAU;mBACzB,CAAC,SAAS,CAAC,UAAU;mBACrB,CAAC,IAAI,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,gBAAgB,KAAK,UAAU,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC9G,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,KAAI,CAAC,aAAa,CAAC,KAAK,EAAE,UAAU,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;YAC3F,CAAC;QACH,CAAC,CAAC,CAAC;QACL,yBAAyB;QACzB,MAAM,CAAC,UAAU,CAAC;IACpB,CAAC;IAEa,kDAA6B,GAA3C,UAA4C,KAAa,EAAE,KAAY;QACrE,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,UAAC,IAAI;YACvB,gDAAgD;YAChD,MAAM,CAAC,IAAI,CAAC,gBAAgB,KAAK,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC,GAAG,CAAC,UAAC,IAAI;YACV,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAC3B,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;YACX,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;QACf,CAAC,CAAC,CAAC;IACL,CAAC;IAEc,oCAAe,GAA9B,UAA+B,KAAqB,EAAE,MAAY,EAAE,SAAkB;QACpF,IAAM,eAAe,GAAG,gBAAgB,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACjF,IAAM,eAAe,GAAG,gBAAgB,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAChF,IAAM,cAAc,GAAG,eAAe,CAAC,UAAU,IAAI,eAAe,CAAC,UAAU,CAAC;QAChF,IAAM,YAAY,GAAG,CAAC,eAAe,CAAC,UAAU,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC;QAChF,IAAM,uBAAuB,GAAG,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;QAExG,MAAM,CAAC,CAAC,cAAc,IAAI,YAAY,CAAC,IAAI,uBAAuB,CAAC;IACrE,CAAC;IAED,0BAA0B;IAEZ,+CAA0B,GAAxC,UAAyC,KAAqB,EAAE,KAAY,EAAE,OAAgB;QAC5F,IAAM,IAAI,GAAS,oBAAoB,CAAC,YAAY,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACrE,MAAM,CAAC,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC;eACxC,IAAI,CAAC,gBAAgB,KAAK,KAAK;eAC/B,IAAI,CAAC,UAAU,KAAK,IAAI,CAAC;IAChC,CAAC;IAEa,+CAA0B,GAAxC,UAAyC,KAAqB,EAAE,KAAY;QAC1E,IAAI,wBAAwB,GAA0B,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,UAAC,IAAI;YACjG,MAAM,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,gBAAgB,KAAK,KAAK,CAAC;QAC5D,CAAC,CAAC,CAAC,GAAG,CAAC,UAAC,IAAI;YACV,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,KAAK,CAAC,0BAA0B,CAAC,MAAM,CAAC,UAAC,IAAI;YAClD,MAAM,CAAC,wBAAwB,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACL,CAAC;IAEa,oCAAe,GAA7B,UAA8B,UAAgB,EAAE,UAAgB;QAC9D,IAAM,eAAe,GAAG,gBAAgB,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QACrF,IAAM,eAAe,GAAG,gBAAgB,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QACrF,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,UAAU,CAAC,IAAI,UAAU,CAAC,gBAAgB,KAAK,IAAI;eACtF,UAAU,CAAC,gBAAgB,KAAK,UAAU,CAAC,gBAAgB;eAC3D,CAAC,eAAe,CAAC,UAAU,IAAI,eAAe,CAAC,UAAU,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;IACjG,CAAC;IAEa,oCAAe,GAA7B,UAA8B,MAAY,EAAE,MAAY;QACtD,MAAM,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,UAAC,OAAO;YACrF,MAAM,CAAC,OAAO,KAAK,MAAM,CAAC,GAAG,CAAC;QAChC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;IAClB,CAAC;IArJc,wCAAmB,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9G,sCAAiB,GAAG,CAAC,cAAc,CAAC,MAAM,EAAE,cAAc,CAAC,MAAM,EAAE,cAAc,CAAC,YAAY,CAAC,CAAC;IAChG,uCAAkB,GAAG,CAAC,cAAc,CAAC,cAAc,EAAE,cAAc,CAAC,UAAU,EAAE,cAAc,CAAC,aAAa,CAAC,CAAC;IAC9G,wCAAmB,GAAG,CAAC,cAAc,CAAC,QAAQ,EAAE,cAAc,CAAC,QAAQ,EAAE,cAAc,CAAC,cAAc,CAAC,CAAC;IACxG,yCAAoB,GAAG,CAAC,cAAc,CAAC,SAAS,EAAE,cAAc,CAAC,SAAS,EAAE,cAAc,CAAC,eAAe,CAAC,CAAC;IAC5G,mDAA8B,GAAG,CAAC,cAAc,CAAC,kBAAkB,EAAE,cAAc,CAAC,kBAAkB,EAAE,cAAc,CAAC,wBAAwB,CAAC,CAAC;IAiJjK,2BAAC;CAAA,AAxJD,IAwJC;eAxJoB,oBAAoB"},"dts":{"name":"/Users/taamato1/pdev/got-store/src/selector/stateSelectorService.d.ts","text":"import Area from '../model/area/area';\r\nimport { AreaKey } from '../model/area/areaKey';\r\nimport Player from '../model/player/player';\r\nimport { House } from '../model/player/house';\r\nimport { GameStoreState } from '../gameStoreState';\r\nimport { OrderTokenType } from '../model/orderToken/orderTokenType';\r\nexport default class StateSelectorService {\r\n    private static SUPPLY_VS_ARMY_SIZE;\r\n    static RAID_ORDER_TOKENS: OrderTokenType[];\r\n    static MARCH_ORDER_TOKENS: OrderTokenType[];\r\n    static DEFEND_ORDER_TOKENS: OrderTokenType[];\r\n    static SUPPORT_ORDER_TOKENS: OrderTokenType[];\r\n    static CONSOLIDATE_POWER_ORDER_TOKENS: OrderTokenType[];\r\n    static getFirstFromIronThroneSuccession(state: GameStoreState): House;\r\n    static getAreaByKey(state: GameStoreState, areaKey: AreaKey): Area;\r\n    static getPlayerByHouse(state: GameStoreState, house: House): Player;\r\n    static getAllAreasAllowedToMarchTo(state: GameStoreState, sourceArea: Area): AreaKey[];\r\n    static calculateAllowedMaxSizeBasedOnSupply(state: GameStoreState, house: House): number;\r\n    static enoughSupplyForArmySize(state: GameStoreState, source: Area, target: Area): boolean;\r\n    static getAreasAllowedToRecruit(state: GameStoreState, house: House): Array<Area>;\r\n    private static getValidAreas(state, sourceArea, areasToCheck);\r\n    static calculateArmiesBySizeForHouse(areas: Area[], house: House): Array<number>;\r\n    private static isAllowedToMove(state, source, targetKey);\r\n    static isAllowedToPlaceOrderToken(state: GameStoreState, house: House, areaKey: AreaKey): boolean;\r\n    static getPlacableOrderTokenTypes(state: GameStoreState, house: House): Array<OrderTokenType>;\r\n    static isAllowedToRaid(sourceArea: Area, targetArea: Area): boolean;\r\n    static isConnectedArea(source: Area, target: Area): boolean;\r\n}\r\n"}}
